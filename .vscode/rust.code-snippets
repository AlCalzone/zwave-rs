{
  "Nom Parser": {
    "scope": "rust",
    "prefix": "parse",
    "body": [
      "pub fn parse(i: parse::Input) -> parse::Result<Self> {",
      "    context(",
      "        \"${1:StructName}\",",
      "        ${0:take(1 as usize)},",
      "    )(i)",
      "}"
    ]
  },
  "impl TryFrom (Parser)": {
    "scope": "rust",
    "prefix": "impltryfrom",
    "body": [
      "impl TryFrom<&[u8]> for ${1:StructName} {",
      "    type Error = crate::error::Error;",
      "",
      "    fn try_from(value: &[u8]) -> crate::error::Result<Self> {",
      "        Self::parse(value).into_result()",
      "    }",
      "}"
    ]
  },
  "impl Serialize": {
    "scope": "rust",
    "prefix": "implserialize",
    "body": [
      "pub fn serialize<'a, W: std::io::Write + 'a>(&'a self) -> impl cookie_factory::SerializeFn<W> + 'a {",
      "    use cf::{bytes::be_u8, sequence::tuple};",
      "",
      "    ${0:tuple((be_u8(1), be_u8(2)))}",
      "}"
    ]
  },
  "impl TryInto (Serializer)": {
    "scope": "rust",
    "prefix": "impltryinto",
    "body": [
      "impl TryInto<Vec<u8>> for &${0:StructName} {",
      "    type Error = crate::error::Error;",
      "",
      "    fn try_into(self) -> Result<Vec<u8>, Self::Error> {",
      "        cf::gen_simple(self.serialize(), Vec::new()).into_result()",
      "    }",
      "}"
    ]
  }
}
